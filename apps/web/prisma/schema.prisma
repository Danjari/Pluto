// ---------- Datasource & Generator ----------
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------- Enums ----------
enum LearningFrequency {
  DAILY
  THREE_PER_WEEK
  WEEKLY
}

enum ProgressionMode {
  LINEAR
  OPEN
}

// ---------- Auth models (NextAuth + Mongo) ----------
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String?
  name          String?
  image         String?
  tz            String    @default("Asia/Dubai")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  notificationPreferences Json @default("{}")

  // relations
  goals    Goal[]
  courses  Course[]
  progress Progress[]
  courseNotificationSettings CourseNotificationSettings[]
  dailyCheckIns DailyCheckIn[]

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@index([identifier, token])
}

// ---------- Domain models ----------
model Goal {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  userId               String            @db.ObjectId
  learningGoal         String
  motivation           String?
  targetCompletionDate DateTime?
  learningFrequency    LearningFrequency @default(THREE_PER_WEEK)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Course {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  userId          String          @db.ObjectId
  playlistId      String
  title           String
  description     String?
  totalVideos     Int             @default(0)
  totalDurationS  Int             @default(0)
  progressionMode ProgressionMode @default(LINEAR)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections Section[]
  videos   Video[]
  notificationSettings CourseNotificationSettings?
  dailyCheckIns DailyCheckIn[]

  @@index([userId])
  @@index([playlistId])
}

model Section {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId   String   @db.ObjectId
  title      String
  orderIndex Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  course Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videos Video[]

  @@index([courseId, orderIndex])
}

model Video {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sectionId    String   @db.ObjectId
  courseId     String   @db.ObjectId
  youtubeId    String
  title        String
  description  String?
  durationS    Int      @default(0)
  thumbnailUrl String?
  orderIndex   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  section  Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@unique([courseId, youtubeId])
  @@index([courseId])
  @@index([sectionId, orderIndex])
}

model Progress {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  videoId     String    @db.ObjectId
  completed   Boolean   @default(false)
  completedAt DateTime?
  watchTimeS  Int       @default(0)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
}

// ---------- Notification models ----------
model CourseNotificationSettings {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId              String   @db.ObjectId @unique
  userId                String   @db.ObjectId
  emailNotificationsEnabled Boolean @default(true)
  studyDays             String[]  // ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"]
  notificationTime      String    @default("21:00") // HH:mm format in user's timezone
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model EmailNotificationLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  courseId   String   @db.ObjectId
  sentAt     DateTime @default(now())
  emailType  String   // "reminder" or "test"
  
  @@index([userId, courseId, sentAt])
}

model DailyCheckIn {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  courseId   String   @db.ObjectId
  checkInDate String  // "2024-01-15" format for easy querying
  mood       String?  // Optional: "great", "okay", "struggling", etc.
  notes      String?  // Optional: user's notes about their study session
  createdAt  DateTime @default(now())
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId, checkInDate])
  @@index([userId, courseId])
  @@index([checkInDate])
}
